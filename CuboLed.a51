;***************************************************************************
;TERMINAIS DO ADC
;***************************************************************************
MOSI 	EQU P1.7
MISO 	EQU P1.5
SS		EQU P1.1
SCK		EQU P1.6

;***************************************************************************
;TERMINAIS DO SHIFT REGISTER
;***************************************************************************
CLK_SR	EQU P1.4
DADO	EQU P1.3
LATCH	EQU P1.0

;***************************************************************************
;BUFFER DO CUBO (64 Bytes)
;***************************************************************************
NV_1	EQU 30h
NV_2	EQU 38h
NV_3	EQU 40h
NV_4	EQU 48h
NV_5	EQU 50h
NV_6	EQU 58h
NV_7	EQU 60h
NV_8	EQU 68h
;***************************************************************************
;VARIÁVEIS
;***************************************************************************
X_VAL	EQU 70h
Y_VAL	EQU 71h
NIVEL_ATUAL	EQU 72h
COUNT_TIMER	EQU	74h
PROX_FRAME	EQU	10h
LOOP_SEL	EQU	11h ;0 PADRAO, 1 PRA ACCELL
;***************************************************************************
;PROGRAMA
;***************************************************************************
	ORG 2000h
	LJMP INICIO
	
	ORG 2003h
	AJMP ISR_INT0
	
	ORG 200Bh
	AJMP ISR_TIMER0
	
	ORG 2013h
	AJMP ISR_INT1
	
	ORG 201Bh
	AJMP ISR_TIMER1
	
	ORG 2050h

INICIO_DB_NIVEIS:
	;PADRAO 1
	DB	18H	
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	;PADRAO 2
	DB	30H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	0CH
		
	;PADRAO 3

	DB	06H
	DB	0CH
	DB	0CH
	DB	18H
	DB	18H
	DB	30H
	DB	30H
	DB	60H

	;PADRAO 4

	DB	03H
	DB	06H
	DB 	0CH
	DB	18H
	DB	18H
	DB	30H
	DB	60H
	DB	0C0H

	;PADRAO 5

	DB	01H
	DB	03H
	DB	06H
	DB	1CH
	DB	38H
	DB	60H
	DB	0C0H
	DB	80H

	;PADRAO 6

	DB	00H
	DB	01H
	DB	07H
	DB	1EH
	DB	78H
	DB	0E0H
	DB	80H
	DB	00H

	;PADRAO 7	

	DB	00H
	DB	00H
	DB 	01H
	DB	7FH
	DB	0FEH
	DB	80H
	DB	00H
	DB	00H

	;PADRÃO 8

	DB	00H
	DB 	00H
	DB 	00H
	DB	0FFH
	DB	0FFH
	DB	00H
	DB	00H
	DB 	00H


	;PADRÃO 9

	DB	00H
	DB	00H
	DB	80H
	DB	0FEH
	DB	7FH
	DB	01H
	DB	00H
	DB	00H

	;PADRAO 10

	DB	00H
	DB 	80H
	DB	0E0H
	DB	78H
	DB	1EH
	DB	07H
	DB	01H
	DB 	00H


	;PADRÃO 11

	DB	80H
	DB	0C0H
	DB	60H
	DB	38H
	DB	1CH
	DB	06H
	DB	03H
	DB	01H

	;PADRAO 12

	DB	0C0H
	DB	60H
	DB	30H
	DB	18H
	DB	18H
	DB	0CH
	DB	06H
	DB	03H	

	;PADÃO 13

	DB	60H
	DB	30H
	DB	30H
	DB	18H
	DB	18H
	DB	0CH
	DB	0CH
	DB 	06H

	;PADRAO 14

	DB	30H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	0CH
		
	;PADRAO 15
	DB	18H	
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	DB	18H
	
INICIO:
	MOV	TMOD,#00010001b
	MOV	TH0,#HIGH(65535-4000)			;4000
	MOV	TL0,#LOW(65535-4000)
	MOV	TH1,#HIGH(20000)
	MOV	TL1,#LOW(20000)
	MOV	COUNT_TIMER,#5
	SETB	IT0
	SETB	ET0
	SETB	TR0
	SETB	ET1
	SETB	TR1
	SETB	EX0
	SETB	EX1
	SETB	PT0
	SETB	EA
	MOV		NIVEL_ATUAL,#01H
	CALL	ZERA_BUFFER
	MOV		LOOP_SEL,#01H
	
;***************************************************************************
;Mostra planos que vão e voltam nas 3 dimensões, e escreve UTFPR
;***************************************************************************
LOOPPATTERN:
	MOV		R2,#08H
	MOV		A,#01H
LOOP_VARRE_X_INDO:
	MOV		R0,#NV_1
	MOV		R1,#64
LOOP_MANDA_FRAME_X_INDO:
	MOV		@R0,A
	INC		R0
	DJNZ	R1,LOOP_MANDA_FRAME_X_INDO
ESPERA_FRAME_X_INDO:
	JNB	PROX_FRAME,ESPERA_FRAME_X_INDO
	CLR	PROX_FRAME
	RL	A
	DJNZ	R2,LOOP_VARRE_X_INDO
	
	MOV		R2,#07H
	MOV		A,#40H
LOOP_VARRE_X_VOLTANDO:
	MOV		R0,#NV_1
	MOV		R1,#64
LOOP_MANDA_FRAME_X_VOLTANDO:
	MOV		@R0,A
	INC		R0
	DJNZ	R1,LOOP_MANDA_FRAME_X_VOLTANDO
ESPERA_FRAME_X_VOLTANDO:
	JNB	PROX_FRAME,ESPERA_FRAME_X_VOLTANDO
	CLR	PROX_FRAME
	RR	A
	DJNZ	R2,LOOP_VARRE_X_VOLTANDO


	MOV		R0,#NV_1
	MOV		R2,#00H
	MOV		R3,#08H ;CONTADOR DO FRAME
LOOP_MANDA_FRAME_Y_INDO:
	MOV		R1,#08H ;CONTADOR DO NIVEL
	CALL	ZERA_BUFFER
LOOP_MANDA_PLANO_Y_INDO:
	MOV		@R0,#0FFh
	MOV		A,R0
	ADD		A,#08H
	MOV		R0,A
	DJNZ	R1,LOOP_MANDA_PLANO_Y_INDO
	INC		R2
	MOV		A,#NV_1
	ADD		A,R2
	MOV		R0,A
ESPERA_FRAME_Y_INDO:
	JNB	PROX_FRAME,ESPERA_FRAME_Y_INDO
	CLR	PROX_FRAME
	DJNZ	R3,LOOP_MANDA_FRAME_Y_INDO

	MOV		A,#NV_1
	ADD		A,#06H
	MOV		R0,A
	MOV		R2,#06H
	MOV		R3,#07H
LOOP_MANDA_FRAME_Y_VOLTANDO:
	MOV		R1,#08H
	CALL	ZERA_BUFFER
LOOP_MANDA_PLANO_Y_VOLTANDO:
	MOV		@R0,#0FFh
	MOV		A,R0
	ADD		A,#08H
	MOV		R0,A
	DJNZ	R1,LOOP_MANDA_PLANO_Y_VOLTANDO
	DEC		R2
	MOV		A,#NV_1
	ADD		A,R2
	MOV		R0,A
ESPERA_FRAME_Y_VOLTANDO:
	JNB		PROX_FRAME,ESPERA_FRAME_Y_VOLTANDO
	CLR		PROX_FRAME
	DJNZ	R3,LOOP_MANDA_FRAME_Y_VOLTANDO
	
	JB	LOOP_SEL,LOOPPATTERN
	SJMP	LOOPACCEL
;***************************************************************************
;Mostra o plano que acompanha o acelerômetro
;***************************************************************************
LOOPACCEL:
	MOV	A,#0C0H ;Lê o X
	ACALL 	CONVADC
	MOV	X_VAL,A
	
	MOV	A,#0E0H ;Lê o Y
	ACALL 	CONVADC
	MOV	Y_VAL,A

	MOV	A,X_VAL
	ACALL	TRADUZ_LEITURA
	MOV	X_VAL,A

	MOV	A,Y_VAL
	ACALL	TRADUZ_LEITURA
	MOV	Y_VAL,A
	
	MOV	A,#7
	XRL	A,X_VAL
	JZ	VERIF_PARALELO;X=0, VERIFICA SE TAMBÉM Y=0
	
	MOV	A,#7
	XRL	A,Y_VAL
	JZ	Y_ZERO
	
	ACALL	INCLINA_MISTURADA
	SJMP	FIM_LOOPACCEL
	
VERIF_PARALELO:
	MOV	A,#7
	XRL	A,Y_VAL
	JZ	X_E_Y_ZERO
	
	ACALL	ANG_SO_Y
	SJMP	FIM_LOOPACCEL
Y_ZERO:
	ACALL	ANG_SO_X
	SJMP	FIM_LOOPACCEL
	
X_E_Y_ZERO:
	ACALL	PARALELO
	
FIM_LOOPACCEL:
	JNB	LOOP_SEL,LOOPACCEL
	AJMP	LOOPPATTERN

;***************************************************************************
;INTERRUPÇÕES
;***************************************************************************
ISR_INT0:
	CPL		LOOP_SEL
	CLR		IE0
	RETI

;***************************************************************************	
ISR_INT1:
	CLR		LOOP_SEL
	CLR		IE1
	RETI
	
;***************************************************************************
ISR_TIMER1:
	PUSH	ACC
	MOV	TH1,#HIGH(20000)
	MOV	TL1,#LOW(20000)
	DJNZ	COUNT_TIMER,FIM_TIMER_1
	MOV	COUNT_TIMER,#5

	SETB PROX_FRAME
FIM_TIMER_1:
	POP	ACC
	RETI

;***************************************************************************
ISR_TIMER0:
	PUSH	00h
	PUSH	01h
	PUSH	02h
	PUSH	ACC
	PUSH	PSW
	MOV	TH0,#HIGH(65535-4000)			;Carga do Timer para 3,75ms
	MOV	TL0,#LOW(65535-4000)
	MOV	P2,#00H
	MOV		A,NIVEL_ATUAL

N1: CJNE	A,#01H,N2
	MOV		A,#NV_1
	ACALL	MANDA_NIVEL
	MOV		P2,#01H
	MOV		NIVEL_ATUAL,#02H
	SJMP	FIM_TIMER
N2: CJNE	A,#02H,N3
	MOV		A,#NV_2
	ACALL	MANDA_NIVEL
	MOV		P2,#02H
	MOV		NIVEL_ATUAL,#04H
	SJMP	FIM_TIMER
N3: CJNE	A,#04H,N4
	MOV		A,#NV_3
	ACALL	MANDA_NIVEL
	MOV		P2,#04H
	MOV		NIVEL_ATUAL,#08H
	SJMP	FIM_TIMER
N4: CJNE	A,#08H,N5
	MOV		A,#NV_4
	ACALL	MANDA_NIVEL
	MOV		P2,#08H
	MOV		NIVEL_ATUAL,#10H
	SJMP	FIM_TIMER
N5: CJNE	A,#10H,N6
	MOV		A,#NV_5
	ACALL	MANDA_NIVEL
	MOV		P2,#10H
	MOV		NIVEL_ATUAL,#20H
	SJMP	FIM_TIMER
N6: CJNE	A,#20H,N7
	MOV		A,#NV_6
	ACALL	MANDA_NIVEL
	MOV		P2,#20H
	MOV		NIVEL_ATUAL,#40H
	SJMP	FIM_TIMER
N7: CJNE	A,#40H,N8
	MOV		A,#NV_7
	ACALL	MANDA_NIVEL
	MOV		P2,#40H
	MOV		NIVEL_ATUAL,#80H
	SJMP	FIM_TIMER
N8: CJNE	A,#80H,FIM_TIMER
	MOV		A,#NV_8
	ACALL	MANDA_NIVEL
	MOV		P2,#80H
	MOV		NIVEL_ATUAL,#01H

FIM_TIMER:
	POP	PSW
	POP	ACC
	POP	02H
	POP	01H
	POP	00H
	RETI
	
;***************************************************************************
INCLINA_MISTURADA:
	ACALL	PARALELO
	RET

;***************************************************************************
ZERA_BUFFER:
	PUSH	00H
	PUSH	01H
	MOV		R0,#NV_1
	MOV		R1,#64
LOOP_ZERA_BUFFER:
	MOV		@R0,#000H
	INC		R0
	DJNZ	R1,LOOP_ZERA_BUFFER
	POP		01H
	POP		00H
	RET
;***************************************************************************
ANG_SO_Y:
	MOV	DPTR,#INICIO_DB_NIVEIS
	MOV	A,Y_VAL
	MOV	B,#08H
	MUL	AB
	MOV	R4,A	;CONTÉM O OFFSET DO DB DO NÍVEL
	MOVC	A,@A+DPTR ;A CONTÉM O PRIMEIRO DE 8 BYTES DO FRAME
	MOV	R0,#NV_1 ;ENDEREÇO DO COMEÇO DO BUFFER
	MOV	R3,#08H ;CONTA 8 LOOPS
LOOP_ANG_SO_Y:
	ACALL	MANDA_NIVEL_INC_Y
	INC	R4
	MOV	A,R4
	MOVC	A,@A+DPTR
	DJNZ	R3,LOOP_ANG_SO_Y	
	RET

;***************************************************************************
ANG_SO_X:
	MOV	DPTR,#INICIO_DB_NIVEIS
	MOV	A,X_VAL
	MOV	B,#08H
	MUL	AB
	MOV	R4,A	;CONTÉM O OFFSET DO DB DO NÍVEL
	MOVC	A,@A+DPTR ;A CONTÉM O PRIMEIRO DE 8 BYTES DO FRAME
	MOV	R0,#NV_1 ;ENDEREÇO DO COMEÇO DO BUFFER
	MOV	R3,#08H ;CONTA 8 LOOPS
LOOP_ANG_SO_X:
	ACALL	MANDA_NIVEL_INC_X
	INC	R4
	MOV	A,R4
	MOVC	A,@A+DPTR
	DJNZ	R3,LOOP_ANG_SO_X
	RET

;***************************************************************************
MANDA_NIVEL_INC_X:
	MOV	R5,#08H
LOOP_MANDA_N_INC_X:
	MOV	@R0,A
	INC	R0
	DJNZ	R5,LOOP_MANDA_N_INC_X
	RET

;***************************************************************************
MANDA_NIVEL_INC_Y:
	MOV	R5,#08H
LOOP_MANDA_N_INC_Y:
	RLC	A
	JC	MANDA_1_Y
	MOV	@R0,#00H
	SJMP MANDA_0_Y
MANDA_1_Y:
	MOV	@R0,#0FFH
MANDA_0_Y:
	INC	R0
	DJNZ	R5,LOOP_MANDA_N_INC_Y
	RET

;***************************************************************************
PARALELO:
	MOV		R0,#NV_1
	MOV		R1,#64
LOOP_ZERA_BUFFER_PARALELO:
	MOV		@R0,#000H
	INC		R0
	DJNZ	R1,LOOP_ZERA_BUFFER_PARALELO
	MOV		R0,#NV_4
	MOV		R1,#08H
LOOP_CARREGA_NV4:
	MOV		@R0,#0FFH
	INC		R0
	DJNZ	R1,LOOP_CARREGA_NV4
	MOV		R0,#NV_5
	MOV		R1,#08H
LOOP_CARREGA_NV5:
	MOV		@R0,#0FFH
	INC		R0
	DJNZ	R1,LOOP_CARREGA_NV5
	RET

;***************************************************************************
;NOME: MANDA_NIVEL
;DESCRICAO: ENVIA PARA OS SHIFT REGISTERS 8 BYTES A PARTIR DO BYTE APONTADO
;POR A
;ENTRADA: A - ENDEREÇO DO PRIMEIRO BYTE
;SAIDA: -
;ALTERA: -
MANDA_NIVEL:
	;SETB	LATCH
	ADD		A,#07H
	MOV 	R0,A
	MOV		R2,#08H
LOOP_ENVIO_NIVEL:
	MOV		A,@R0
	MOV		R1,#08H
LOOP_ENVIO_BYTE:
	RLC		A
	MOV		DADO,C
	SETB	CLK_SR
	CLR		CLK_SR
	DJNZ	R1,LOOP_ENVIO_BYTE
	DEC		R0
	DJNZ	R2,LOOP_ENVIO_NIVEL
	SETB 	LATCH
	CLR		LATCH
FIM_MANDA_NIVEL:
	RET

;***************************************************************************
;NOME: TRADUZ_LEITURA
;DESCRICAO: TRANSFORMA A LEITURA DO ADC EM UM VALOR DE 0 A 14
;ENTRADA: A - VALOR DA LEITURA DO ADC
;SAIDA: A - VALOR CONVERTIDO
;ALTERA: R0, R1, R2, R3 E R4
TRADUZ_LEITURA:
	MOV	R4,A
;****Vê SE É 0
	MOV	R3,#0
	MOV	A,R4
	MOV	R0,#0
	MOV	R1,#49
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_MEIO_SALTO
	
;****VÊ SE É 1
	MOV	R3,#1
	MOV	A,R4
	MOV	R0,#50
	MOV	R1,#54
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_MEIO_SALTO;SE DENTRO DO INTERVALO, RETORNA
	
;****VÊ SE É 2
	MOV	R3,#2
	MOV	A,R4
	MOV	R0,#55
	MOV	R1,#59
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_MEIO_SALTO;SE DENTRO DO INTERVALO, RETORNA
	SJMP	CONTINUA_MEIO_SALTO

;****MEIO SALTO DEVIDO A LIMITAÇÃO DO JZ**********************
ENCONTROU_MEIO_SALTO:
	LJMP	ENCONTROU_INTERVALO
;*************************************************************
CONTINUA_MEIO_SALTO:
;****VÊ SE É 3
	MOV	R3,#3
	MOV	A,R4
	MOV	R0,#60
	MOV	R1,#64
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_MEIO_SALTO;SE DENTRO DO INTERVALO, RETORNA
	
;****VÊ SE É 4
	MOV	R3,#4
	MOV	A,R4
	MOV	R0,#65
	MOV	R1,#69
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_MEIO_SALTO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 5
	MOV	R3,#5
	MOV	A,R4
	MOV	R0,#70
	MOV	R1,#74
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 6
	MOV	R3,#6
	MOV	A,R4
	MOV	R0,#75
	MOV	R1,#76
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 7
	MOV	R3,#7
	MOV	A,R4
	MOV	R0,#77
	MOV	R1,#82
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA
	
;****VÊ SE É 8
	MOV	R3,#8
	MOV	A,R4
	MOV	R0,#83
	MOV	R1,#84
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 9
	MOV	R3,#9
	MOV	A,R4
	MOV	R0,#85
	MOV	R1,#89
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 10
	MOV	R3,#10
	MOV	A,R4
	MOV	R0,#90
	MOV	R1,#94
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 11
	MOV	R3,#11
	MOV	A,R4
	MOV	R0,#95
	MOV	R1,#99
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 12
	MOV	R3,#12
	MOV	A,R4
	MOV	R0,#100
	MOV	R1,#104
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 13
	MOV	R3,#13
	MOV	A,R4
	MOV	R0,#105
	MOV	R1,#109
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

;****VÊ SE É 14
	MOV	R3,#14
	MOV	A,R4
	MOV	R0,#110
	MOV	R1,#200
	ACALL	CHECA_INTERVALO
	XRL	A,#01H
	JZ	ENCONTROU_INTERVALO;SE DENTRO DO INTERVALO, RETORNA

ENCONTROU_INTERVALO:
	MOV	A,R3
	RET
;***************************************************************************
;NOME: CHECA_INTERVALO
;DESCRICAO: VERIFICA SE O VALOR EM A ESTÁ ENTRE R0 E R1
;ENTRADA: A, R0, R1
;SAIDA: A - 00H SE FORA DO INTERVALO, 01H SE DENTRO DO INTERVALO.
;ALTERA: R2
CHECA_INTERVALO:
	MOV	R2,A
	CLR	C
	SUBB	A,R0
	JC	FORA_INT ;A<inferior, fora do intervalo
	
	MOV	A,R2
	CLR	C
	SUBB	A,#01H
	CLR	C
	SUBB	A,R1
	JNC	FORA_INT ;A>superior, fora do intervalo
	
	MOV	A,#01H
	RET
FORA_INT:
	MOV	A,#00H
	RET

;***************************************************************************
;NOME: CONVADC
;DESCRICAO: LÊ O VALOR DO CANAL ESPECIFICADO POR A DO ADC
;ENTRADA: A - CANAL DO ADC A SER CONVERTIDO
;SAIDA: A - VALOR LIDO DO ADC
;ALTERA: B
CONVADC:
	CLR 	SS
	MOV	B,#03H		;ENVIAR 3 BITS
ENVIA:
	RLC		A
	MOV		MOSI,C
	ACALL 	PULSE
	DJNZ	B,ENVIA
	MOV		B,#08H		;RECEBER 8 BITS
RECEBE:
	ACALL	PULSE
	MOV		C,MISO
	RLC		A
	DJNZ	B,RECEBE
	SETB	SS
	RET

;***************************************************************************
;NOME: PULSE
;DESCRICAO: MANDA SINAL DE CLOCK PARA O ADC
;ENTRADA: -
;SAIDA: -
;ALTERA: -
PULSE:
	SETB	SCK
	NOP
	CLR		SCK
	RET
END